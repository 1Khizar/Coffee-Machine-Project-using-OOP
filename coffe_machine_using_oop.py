# -*- coding: utf-8 -*-
"""Coffe Machine using OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--nsIpAcDN8K2NFsYeHB74j6hadwH6hm
"""

from functools import total_ordering
class Menu_Item:
  def __init__(self):
    self.ingredients={
      "espresso":{
        "ingredients":{
            "water":50,
            "milk":120,
            "coffee":18,
        },
        "cost":1.5,
    },
    "latte":{
        "ingredients":{
            "water":200,
            "milk":150,
            "coffee":24,
        },
        "cost":2.5,
    },
    "cappuccino":{
        "ingredients":{
            "water":250,
            "milk":100,
            "coffee":24,
        },
        "cost":3.0,
    }
}

# Menu Class
class Menu(Menu_Item):
  def getitems(self):
    for item in self.ingredients:
      print(item)

# Checking the order drink is present in the menu
  def find_order(self,order_name):
      if order_name in self.ingredients:
         print(order_name)
         return True
      else:
        print(f"Sorry the {order_name} is not avaiable")
        return None

# Coffee Maker class
class Coffee_Maker:

  def __init__(self):
     self.profit=0
     self.resources={
      "water":500,
      "milk":400,
      "coffee":100
    }

#Function of Report about the resources in machine
  def report(self):
    print(f"Water: {self.resources['water']}ml")
    print(f"Milk: {self.resources['milk']}ml")
    print(f"Coffee: {self.resources['coffee']}g")
    print(f"Money: {self.profit}$")

# Function for checking that resources are available for the order drink
  def check_resources(self,order_ingredients):
    for item in order_ingredients:
      if order_ingredients[item] >= self.resources[item]:
        print(f"Sorry there is not enough {order_ingredients[item]}.")
        return False
      else:
        return True

# Make coffee by reducing the ingredients from the machine fro the order drink
  def make_coffee(self,order_drink_ingredients):
    for item in self.resources:
      self.resources[item]-=order_drink_ingredients[item]
    print(f"Here is your coffee ☕☕☕☕☕. Enjoy!")

# New class related to money
class MoneyMachine(Coffee_Maker):

# Function that takes the money from the user and check that it is enough for the order drink or not
  def make_payment(self, drink_order):
    print("Please insert coins.")
    quarters = int(input("how many quarters?: "))
    dimes = int(input("how many dimes?: "))
    nickles = int(input("how many nickles?: "))
    pennies = int(input("how many pennies?: "))
    total_user_money = quarters * 0.25 + dimes * 0.10 + nickles * 0.05 + pennies * 0.01

    if total_user_money >= drink_order["cost"]:
      change = round(total_user_money - drink_order["cost"],2)
      print(f"Here is ${change} in change.")

      # self.profit += drink_order["cost"]
      return True
    else:
      print("Sorry that's not enough money. Money refunded.")
      return False

# Now Main program start where the instances of classes are made
menu_item=Menu_Item()
menu=Menu()
coffee_maker=Coffee_Maker()
money_machine=MoneyMachine()

Machine_is_ON=True

print("Welcome to the Coffee Machine")
while Machine_is_ON:

  choice=input("What would you like? (espresso/latte/cappuccino): ")

  if choice=="off":
    Machine_is_ON=False

  elif choice =="report":
    coffee_maker.report()

  else:
    if menu.find_order(choice):
      drink_order=menu_item.ingredients[choice]['ingredients']
      if coffee_maker.check_resources(drink_order):
         if money_machine.make_payment(menu_item.ingredients[choice]):
           coffee_maker.profit+=menu_item.ingredients[choice]['cost']
           coffee_maker.make_coffee(drink_order)